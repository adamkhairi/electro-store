name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: electrostock_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Lint code
      run: bun run lint

    - name: Type checking
      run: bun run type-check

    - name: Run frontend tests
      run: bun run test:frontend
      env:
        CI: true

    - name: Run backend tests
      run: bun run test:backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/electrostock_test
        JWT_SECRET: test-secret
        NODE_ENV: test

    - name: Run shared package tests
      run: bun run test:shared

    - name: Build frontend
      run: bun run build:frontend

    - name: Build backend
      run: bun run build:backend

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Run security audit
      run: bun audit

    - name: Run dependency check
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-deploy:
    needs: [lint-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build applications
      run: bun run build

    - name: Build Docker images
      run: |
        docker build -t electrostock-frontend:${{ github.sha }} ./frontend
        docker build -t electrostock-backend:${{ github.sha }} ./backend

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_FRONTEND: electrostock-frontend
        ECR_REPOSITORY_BACKEND: electrostock-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker tag electrostock-frontend:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker tag electrostock-backend:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG

    - name: Deploy to staging
      run: |
        # Update Kubernetes manifests with new image tags
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" deployment/kubernetes/staging/*.yaml
        # Apply Kubernetes manifests
        kubectl apply -f deployment/kubernetes/staging/
